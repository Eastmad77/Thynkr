#!/usr/bin/env node
/**
 * render-posters.js
 * Generates visual previews for poster flows.
 * Respects package.json -> config.media.posters (defaults to media/posters).
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const ROOT = process.cwd();
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// --- Resolve poster root from package.json config ----------------------------
function getPosterRoot() {
  const pkgPath = path.join(ROOT, "package.json");
  const pkg = JSON.parse(fs.readFileSync(pkgPath, "utf8"));
  const configured = pkg?.config?.media?.posters;
  return path.join(ROOT, configured || "media/posters");
}

const POSTER_ROOT = getPosterRoot();
const SEQ_JSON = path.join(POSTER_ROOT, "poster-sequence.json");
const OUT_DIR = path.join(ROOT, "promo", "storyboard");

// --- Helpers -----------------------------------------------------------------
const readJSON = p => JSON.parse(fs.readFileSync(p, "utf8"));
const ensureDir = p => fs.mkdirSync(p, { recursive: true });
const exists = rel => fs.existsSync(path.join(POSTER_ROOT, rel));
const relFromRoot = abs => path.relative(ROOT, abs).replaceAll(path.sep, "/");

function styleBlock() {
  return `
    :root { color-scheme: dark; --bg:#0a1228; --card:#0f1a38; --ink:#fefefe; --muted:#9fb3d2; --brand:#00e8ff; }
    *{box-sizing:border-box}
    body{margin:0;background:var(--bg);color:var(--ink);font:16px/1.5 system-ui}
    header{padding:20px 16px;border-bottom:1px solid #182446;background:linear-gradient(180deg,rgba(255,255,255,.03),transparent)}
    .wrap{padding:16px;max-width:1200px;margin:auto}
    .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(220px,1fr));gap:14px}
    .card{background:var(--card);border:1px solid #19264b;border-radius:14px;overflow:hidden}
    .card img{width:100%;height:300px;object-fit:cover}
    .meta{padding:10px 12px;font-size:12px;color:var(--muted);display:flex;justify-content:space-between}
    .ok{color:#43d17e}.miss{color:#ff6b6b}
    .flow{background:var(--card);border:1px solid #19264b;border-radius:14px;padding:12px;margin-bottom:20px}
    .flow h3{margin:0 0 10px;color:var(--brand)}
    .seq{display:flex;gap:10px;flex-wrap:wrap}
    .step{width:160px}
    .thumb{width:160px;height:100px;border-radius:10px;object-fit:cover;border:1px solid #1a284e}
    footer{padding:16px;text-align:center;color:var(--muted)}
    .path{color:var(--muted);font-size:12px}
  `;
}

const htmlDoc = (title, body) => `<!doctype html><html lang="en"><head>
  <meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>${title}</title><style>${styleBlock()}</style>
</head><body>${body}</body></html>`;

function gridPage(json) {
  const cards = json.library.map(fname => {
    const ok = exists(fname);
    return `
      <div class="card">
        <img src="/${relFromRoot(path.join(POSTER_ROOT, fname))}" alt="${fname}"/>
        <div class="meta"><span>${fname}</span><span class="${ok ? "ok" : "miss"}">${ok ? "OK" : "Missing"}</span></div>
      </div>`;
  }).join("");

  return htmlDoc("Poster Library", `
    <header class="wrap"><h1>Poster Library</h1>
      <div class="path">Poster root: /${relFromRoot(POSTER_ROOT)}</div>
    </header>
    <main class="wrap"><section class="grid">${cards}</section></main>
    <footer>Generated by render-posters.js</footer>`);
}

const flowBlock = (title, arr) => `
  <div class="flow">
    <h3>${title}</h3>
    <div class="seq">
      ${arr.map(s => `
        <div class="step">
          <img class="thumb" src="/${relFromRoot(path.join(POSTER_ROOT, s.file))}" alt="${s.file}"/>
          <div class="meta">${s.caption || ""}</div>
        </div>
      `).join("")}
    </div>
  </div>`;

function sequencePage(json) {
  return htmlDoc("Poster Sequence Preview", `
    <header class="wrap"><h1>Poster Sequence Preview</h1>
      <div class="path">Sequence JSON: /${relFromRoot(SEQ_JSON)}</div>
    </header>
    <main class="wrap">
      ${flowBlock("Free Flow", json.flows.free)}
      ${flowBlock("Pro Flow", json.flows.pro)}
      ${flowBlock("onSuccess", json.contexts.onSuccess)}
      ${flowBlock("onFail", json.contexts.onFail)}
      ${flowBlock("nightExit", json.contexts.nightExit)}
    </main>
    <footer>Generated by render-posters.js</footer>`);
}

function main() {
  if (!fs.existsSync(SEQ_JSON)) {
    console.error(`❌ poster-sequence.json not found at: ${relFromRoot(SEQ_JSON)}`);
    process.exit(1);
  }
  const spec = readJSON(SEQ_JSON);
  ensureDir(OUT_DIR);
  fs.writeFileSync(path.join(OUT_DIR, "storyboard-grid.html"), gridPage(spec));
  fs.writeFileSync(path.join(OUT_DIR, "sequence-preview.html"), sequencePage(spec));
  console.log("✅ Poster previews written to /promo/storyboard/");
}

main();
